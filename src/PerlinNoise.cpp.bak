#include <PerlinNoise.hpp.bak>

#include <random>
#include <algorithm>
#include <limits>

PerlinNoise::PerlinNoise()
{
    m_Permutation.resize(256);

    std::random_device device;

    std::iota(m_Permutation.begin(), m_Permutation.end(), 0);

    std::default_random_engine engine(m_Seed);

    std::shuffle(m_Permutation.begin(), m_Permutation.end(), engine);

    m_Permutation.insert(m_Permutation.begin(), m_Permutation.end(), m_Permutation.end());
}

PerlinNoise::PerlinNoise(int32_t _seed)
{
    m_Permutation.resize(256);

    m_Seed = _seed;

    std::iota(m_Permutation.begin(), m_Permutation.end(), 0);

    std::default_random_engine engine(m_Seed);

    std::shuffle(m_Permutation.begin(), m_Permutation.end(), engine);

    m_Permutation.insert(m_Permutation.begin(), m_Permutation.end(), m_Permutation.end());
}

double PerlinNoise::getNoise(double _x, double _y, double _z)
{
    int X = (int) floor(_x) & 255;
    int Y = (int) floor(_y) & 255;
    int Z = (int) floor(_z) & 255;

    // Find relative x, y,z of point in cube
    _x -= floor(_x);
    _y -= floor(_y);
    _z -= floor(_z);

    // Compute fade curves for each of _x, _y, _z
    double u = fade(_x);
    double v = fade(_y);
    double w = fade(_z);

    // Hash coordinates of the 8 cube corners
    int A = m_Permutation[X] + Y;
    int AA = m_Permutation[A] + Z;
    int AB = m_Permutation[A + 1] + Z;
    int B = m_Permutation[X + 1] + Y;
    int BA = m_Permutation[B] + Z;
    int BB = m_Permutation[B + 1] + Z;

    // Add blended results from 8 corners of cube
    double res = lerp(w, lerp(v, lerp(u, grad(m_Permutation[AA], _x, _y, _z), grad(m_Permutation[BA], _x-1, _y, _z)), lerp(u, grad(m_Permutation[AB], _x, _y-1, _z), grad(m_Permutation[BB], _x-1, _y-1, _z))),	lerp(v, lerp(u, grad(m_Permutation[AA+1], _x, _y, _z-1), grad(m_Permutation[BA+1], _x-1, _y, _z-1)), lerp(u, grad(m_Permutation[AB+1], _x, _y-1, _z-1),	grad(m_Permutation[BB+1], _x-1, _y-1, _z-1))));
    return (res + 1.0)/2.0;
}

double PerlinNoise::fade(double _t) 
{
    return _t * _t * _t * (_t * (_t * 6 - 15) + 10);
}
double PerlinNoise::lerp(double _t, double _a, double _b) 
{
    return _a + _t * (_b - _a);
}
double PerlinNoise::grad(int _hash, double _x, double _y, double _z)
{
    int h = _hash & 15;
    // Convert lower 4 bits of hash into 12 gradient directions
    double u = h < 8 ? _x : _y,
            v = h < 4 ? _y : h == 12 || h == 14 ? _x : _z;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}